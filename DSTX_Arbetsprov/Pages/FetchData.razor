@page "/fetchdata"

<PageTitle>All Data</PageTitle>

<div class="content-container">
    <div class="text-container">
        <h1>All Data</h1>
    </div>
    @if (workplaces == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="container">
            <div class="form-container">
                <label for="workplace">Choose a Workplace:</label>
                <select @onchange="SetSelectedId" name="workplace" class="form-control">
                    <option value="0" selected>All</option>
                    @foreach (var workplace in @workplaces)
                    {
                        <option value="@workplace.Id">@workplace.Name (@workplace.Id)</option>
                    }
                </select>

                <div class="form-group">
                    <label for="fromdate">From:</label>
                    <input @bind-value="dates[0]" name="fromdate" type="date" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="todate">To:</label>
                    <input @bind-value="dates[1]" name="todate" type="date" class="form-control" />
                </div>

                <div class="form-group">
                    <button @onclick="GetAllTimeReportsById" class="btn btn-primary" type="submit">Search</button>
                </div>
            </div>
        </div>

    }
    @if (timeReportList == null)
    {
        <p><em>Waiting...</em></p>
    }
    else
    {
        @if (@timeReportList.Count == 0)
        {
            <p><em>No Data between the entered dates</em></p>

        }
        else
        {
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th><button @onclick="SortById" class="btn btn-link">Id</button></th>
                            <th><button @onclick="SortByDate" class="btn btn-link">Date</button></th>
                            <th><button @onclick="SortByHour" class="btn btn-link">Hours</button></th>
                            <th><button @onclick="SortByWorkplaceId" class="btn btn-link">WorkplaceId</button></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var timeReport in timeReportList)
                        {
                            <tr>
                                <td>@timeReport.Id</td>
                                <td>@timeReport.Date.ToShortDateString()</td>
                                <td>@timeReport.Hours</td>
                                <td>@timeReport.WorkplaceId</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@code {
    [Inject]
    private ITimeReportService _timeReportService { get; set; }
    private List<TimeReport> timeReportList;
    private List<Workplace> workplaces;
    private int selectedId = 0;
    private DateTime[] dates = new DateTime[2];
    private DateTime dateTimeNow = DateTime.Now;

    private bool sortByDateAscending = true;
    private bool sortByTemperatureCAscending = true;
    private bool sortByTemperatureFAscending = true;
    private bool sortBySummaryAscending = true;


    protected override async Task OnInitializedAsync()
    {

        workplaces = await _timeReportService.GetAllWorkplacesAsync();
    }
    private async Task SetSelectedId(ChangeEventArgs e)
    {
        selectedId = Convert.ToInt32(e.Value);

    }
    private async Task GetAllTimeReportsById()
    {
        timeReportList = await _timeReportService.GetAllTimeReportsByIdAndDate(dates[0], dates[1], selectedId);
    }

    #region Sorting
    private void SortByDate()
    {
        if (sortByDateAscending)
        {
            timeReportList = timeReportList.OrderBy(f => f.Date).ToList();
        }
        else
        {
            timeReportList = timeReportList.OrderByDescending(f => f.Date).ToList();
        }
        sortByDateAscending = !sortByDateAscending;
    }

    private void SortByHour()
    {
        if (sortByTemperatureCAscending)
        {
            timeReportList = timeReportList.OrderBy(f => f.Hours).ToList();
        }
        else
        {
            timeReportList = timeReportList.OrderByDescending(f => f.Hours).ToList();
        }
        sortByTemperatureCAscending = !sortByTemperatureCAscending;
    }

    private void SortByWorkplaceId()
    {
        if (sortByTemperatureFAscending)
        {
            timeReportList = timeReportList.OrderBy(f => f.WorkplaceId).ToList();
        }
        else
        {
            timeReportList = timeReportList.OrderByDescending(f => f.WorkplaceId).ToList();
        }
        sortByTemperatureFAscending = !sortByTemperatureFAscending;
    }

    private void SortById()
    {
        if (sortBySummaryAscending)
        {
            timeReportList = timeReportList.OrderBy(f => f.Id).ToList();
        }
        else
        {
            timeReportList = timeReportList.OrderByDescending(f => f.Id).ToList();
        }
        sortBySummaryAscending = !sortBySummaryAscending;
    }
    #endregion
}
