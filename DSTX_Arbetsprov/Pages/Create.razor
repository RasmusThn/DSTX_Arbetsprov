@page "/create"


<h3>Create Time-Report</h3>

<EditForm Context="formContext" Model="@_timeReport" OnValidSubmit="CreateReport">
    <DataAnnotationsValidator />
    <ul>
        <li>
            <label for="WorkplaceIdInput">Workplace Id</label>
            <input type="number" id="WorkplaceIdInput" @bind="_timeReport.WorkplaceId" min="1" placeholder="Workplace Id" />
        </li>
        <li>
            <label for="HoursInput">Hours</label>
            <input type="number" id="HoursInput" @bind="_timeReport.Hours" min="0" max="24" placeholder="Hours" />
        </li>
        <li>
            <label for="DateInput">Date</label>
            <input type="date" id="DateInput" @bind="_timeReport.Date" 
            min="@DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd")" 
            max="@DateTime.Now.AddDays(7).ToString("yyyy-MM-dd")" />
        </li>
        <li>
            <label for="InfoInput">Extra Info</label>
            <input type="text" id="InfoInput" @bind="_timeReport.Info" placeholder="Extra Info" />
        </li>
    </ul>
    <ValidationMessage For="@(() => _timeReport.WorkplaceId)" />

    <button type="submit">Create</button>
</EditForm>


<dív>
    @if (validEntry)
    {
        <p>
            Id = @_timeReport.Id
            <br/>
            Workplace Id = @_timeReport.WorkplaceId
            <br/>
            Hours = @_timeReport.Hours
            <br/>
            Date = @_timeReport.Date.ToString("yyyy-MM-dd")
            <br/>
            Extra Info = @_timeReport.Info
        </p>
    }
</dív>


@code {
    private TimeReport _timeReport { get; set; } = new();
    private bool validEntry { get; set; } = false;
    private ITimeReportService _reportService;

    protected override void OnInitialized()
    {
        _timeReport.Date = DateTime.Now;
        base.OnInitialized();
    }
    private async Task CreateReport()
    {
        _reportService = new TimeReportService();
        string response = await _reportService.CreateTimeReport(_timeReport);
        validEntry = true;

    }
}
