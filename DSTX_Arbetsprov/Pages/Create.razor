@page "/create"
@using System.Text.Json;
@using Entities.DataTransferObjects;

@inject IJSRuntime JSRuntime


<h3>Create Time-Report</h3>

@if (workplaces == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <EditForm Context="formContext" Model="@timeReport" OnValidSubmit="HandleCreateReport">
        <DataAnnotationsValidator />

        <ul>
            <li>
                <label for="DateInput">Date: </label>
                <input type="date" id="DateInput" @bind="timeReport.Date"
                       min="@DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd")"
                       max="@DateTime.Now.AddDays(7).ToString("yyyy-MM-dd")" />
            </li>
            <li>
                <label for="HoursInput">Hours: </label>
                <input type="number" id="HoursInput" @bind="timeReport.Hours" min="0" max="24" placeholder="Hours" />
            </li>
            <li>
                <select @onchange="SetSelectedId" id="workplaceSelect">

                    @foreach (var workplace in @workplaces)
                    {
                        <option selected value="@workplace.Id">@workplace.Name</option>
                    }
                </select>
            </li>
            <li>
                <label for="InfoInput">Info: </label>
                <input type="text" id="InfoInput" @bind="timeReport.Info" placeholder="Info" />
            </li>
            <li>
                <label for="imageInput">Image: </label>
                <input type="file" id="imageInput" @ref="imageInputRef" />
            </li>
        </ul>
        <ValidationMessage For="@(() => timeReport.WorkplaceId)" />

        <button type="submit" class="btn btn-primary">Create</button>
    </EditForm>


    <dív>
        @if (validEntry)
        {
            <p>
                Id = @timeReport.Id
                <br />
                Workplace Id = @timeReport.WorkplaceId
                <br />
                Hours = @timeReport.Hours
                <br />
                Date = @timeReport.Date.ToString("yyyy-MM-dd")
                <br />
                Extra Info = @timeReport.Info
            </p>
            <p><em>Successfully created</em></p>
        }
    </dív>
}


@code {
    [Inject]
    private ITimeReportService _timeReportService { get; set; }
    private TimeReport timeReport { get; set; } = new();
    private List<Workplace> workplaces;
    private bool validEntry { get; set; } = false;
    private int selectedId = 0;
    private IBrowserFile imageFile;
    private ElementReference imageInputRef;
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("import", "/js/uploadImage.js");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        timeReport.Date = DateTime.Now;
        workplaces = await _timeReportService.GetAllWorkplacesAsync();
        base.OnInitialized();
    }
    private async Task HandleCreateReport()
    {
        var response = await JSRuntime.InvokeAsync<TransferTimeReportDto>("handleImageUpload", imageInputRef);

        if (response != null && !string.IsNullOrEmpty(response.Id.ToString()))
        {
            timeReport.Id = Convert.ToInt32(response.Id);
            timeReport.WorkplaceId = response.WorkplaceId;
            timeReport.Date = DateTime.Parse(response.Date);
            timeReport.Hours = float.Parse(response.Hours);
            timeReport.Info = response.Info;

            validEntry = true;
        }
        else
        {
            // Operation failed or response is null or missing required properties
        }

    }
    private async Task SetSelectedId(ChangeEventArgs e)
    {
        selectedId = Convert.ToInt32(e.Value);

    }
}
